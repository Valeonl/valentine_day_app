document.addEventListener('DOMContentLoaded', () => {
    let firstCard = null;
    let secondCard = null;
    let canFlip = true;
    let moves = 0;
    let pairs = 0;
    
    function shuffleCards() {
        return [...PAIRS].sort(() => Math.random() - 0.5);
    }
    
    function createCard(cardData) {
        const card = document.createElement('div');
        card.className = 'card';
        
        card.innerHTML = `
            <div class="card-front">‚ù§Ô∏è</div>
            <div class="card-back">
                <div class="card-emoji">${cardData.emoji}</div>
                <div class="card-label" style="font-size: ${cardData.fontSize || '1.0rem'}">${cardData.label}</div>
            </div>
        `;
        
        card.addEventListener('click', () => handleCardClick(card, cardData));
        return card;
    }
    
    function handleCardClick(card, cardData) {
        if (!canFlip || card.classList.contains('flipped') || card.classList.contains('matched')) {
            return;
        }
        
        SOUNDS.flip.play();
        card.classList.add('flipped');
        
        if (!firstCard) {
            firstCard = { card, cardData };
            return;
        }
        
        secondCard = { card, cardData };
        moves++;
        updateStats();
        
        checkMatch();
    }
    
    function createHeartParticles(x, y) {
        for (let i = 0; i < 10; i++) {
            const heart = document.createElement('div');
            heart.className = 'heart-particle';
            heart.innerHTML = '‚ù§Ô∏è';
            heart.style.left = `${x + (Math.random() - 0.5) * 100}px`;
            heart.style.top = `${y + (Math.random() - 0.5) * 100}px`;
            document.body.appendChild(heart);
            
            setTimeout(() => heart.remove(), 1000);
        }
    }
    
    function showCustomAlert(message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–ª–µ—Ä—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingAlert = document.querySelector('.custom-alert');
        if (existingAlert) {
            existingAlert.remove();
        }

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
        const cleanMessage = message.replace(/<br>/g, ' ');

        const alert = document.createElement('div');
        alert.className = 'custom-alert';
        alert.textContent = cleanMessage;
        document.body.appendChild(alert);

        setTimeout(() => alert.classList.add('show'), 100);
        setTimeout(() => {
            alert.classList.remove('show');
            setTimeout(() => alert.remove(), 500);
        }, 2000);
    }
    
    function checkMatch() {
        canFlip = false;
        
        if (firstCard.cardData.category === secondCard.cardData.category) {
            if (pairs === 7) {
                setTimeout(() => {
                    SOUNDS.win.play();
                    firstCard.card.classList.add('matched');
                    secondCard.card.classList.add('matched');
                    resetCards();
                    pairs++;
                    updateStats();
                    checkWin();
                }, 500);
            } else {
                SOUNDS.match.play();
                const rect = firstCard.card.getBoundingClientRect();
                const x = rect.left + rect.width / 2;
                const y = rect.top + rect.height / 2;
                
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                const firstLabel = firstCard.cardData.label.replace(/<br>/g, ' ');
                const secondLabel = secondCard.cardData.label.replace(/<br>/g, ' ');
                
                setTimeout(() => {
                    showCustomAlert(`–ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞: ${firstLabel} + ${secondLabel}!`);
                    createHeartParticles(x, y);
                    firstCard.card.classList.add('matched');
                    secondCard.card.classList.add('matched');
                    resetCards();
                    pairs++;
                    updateStats();
                    checkWin();
                }, 500);
            }
        } else {
            setTimeout(() => {
                firstCard.card.classList.remove('flipped');
                secondCard.card.classList.remove('flipped');
                resetCards();
            }, 1000);
        }
    }
    
    function resetCards() {
        firstCard = null;
        secondCard = null;
        canFlip = true;
    }
    
    function updateStats() {
        document.querySelector('.moves').textContent = `–•–æ–¥–æ–≤: ${moves}`;
        document.querySelector('.pairs').textContent = `–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: ${pairs}/8`;
    }
    
    function checkWin() {
        if (pairs === 8) {
            SOUNDS.win.play();
            const randomWish = WISHES[Math.floor(Math.random() * WISHES.length)];
            const modal = document.createElement('div');
            modal.className = 'congratulation-modal';
            modal.innerHTML = `
                <img src="css/pics/angel.png" alt="–°–≤—è—Ç–æ–π –í–∞–ª–µ–Ω—Ç–∏–Ω">
                <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ</h2>
                <p>–í—ã –Ω–∞—à–ª–∏ –≤—Å–µ –ø–∞—Ä—ã –∑–∞ ${moves} —Ö–æ–¥–æ–≤!</p>
                <p class="wish-title">–°–≤—è—Ç–æ–π –í–∞–ª–µ–Ω—Ç–∏–Ω –∂–µ–ª–∞–µ—Ç –í–∞–º:</p>
                <div class="wish-container">
                    ${randomWish}
                </div>
                <button onclick="location.reload()">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ</button>
            `;
            document.body.appendChild(modal);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    window.saveScreenshot = async function() {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            const screenshotContainer = document.createElement('div');
            screenshotContainer.className = 'screenshot-container';
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
            const modalContent = document.querySelector('.congratulation-modal').cloneNode(true);
            modalContent.querySelectorAll('button').forEach(btn => btn.remove());
            
            screenshotContainer.appendChild(modalContent);
            document.body.appendChild(screenshotContainer);

            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            setTimeout(() => {
                html2canvas(screenshotContainer, {
                    backgroundColor: '#ffffff',
                    scale: 2,
                    useCORS: true,
                    allowTaint: true,
                    onrendered: function(canvas) {
                        const link = document.createElement("a");
                        link.download = "valentine_wish.png";
                        link.href = canvas.toDataURL("image/png");
                        link.click();
                        screenshotContainer.remove();
                    }
                });
            }, 100);
        } catch (error) {
            console.error("Screenshot failed:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const introModal = document.createElement('div');
    introModal.className = 'intro-modal';
    introModal.innerHTML = `
        <div class="intro-modal-content">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üíù</h2>
            <p>–°–≤—è—Ç–æ–π –í–∞–ª–µ–Ω—Ç–∏–Ω - –æ—á–µ–Ω—å –∑–∞–Ω—è—Ç–æ–π —á–µ–ª–æ–≤–µ–∫. </p>
            <p>–í –î–µ–Ω—å –≤—Å–µ—Ö –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å –º–Ω–æ–∂–µ—Å—Ç–≤—É –ª—é–¥–µ–π –Ω–∞–π—Ç–∏ —Å–≤–æ—é –ª—é–±–æ–≤—å!</p>
            <p>–ü–æ–º–æ–≥–∏—Ç–µ –µ–º—É —Å–æ–µ–¥–∏–Ω–∏—Ç—å –ø–∞—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, –∞ –æ–Ω –≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –æ—Å–æ–±–æ–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ!</p>
            <button onclick="startGame()">–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ!</button>
        </div>
    `;
    document.body.appendChild(introModal);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    const gameGrid = document.querySelector('.game-grid');
    const shuffledCards = getRandomPairs();
    
    shuffledCards.forEach(cardData => {
        gameGrid.appendChild(createCard(cardData));
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const progressbar = document.querySelector('.progress-value');
    const preloader_idio = document.querySelector('.ldio div');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ —Å—Ç–∏–ª–∏
    if (preloader_idio) {
        preloader_idio.style.background = 'red';
    }
    if (progressbar) {
        progressbar.style.background = 'red';
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    let p = 0;
    function timeout_trigger() {
        const progress_bar = document.querySelector('.progress-value');
        const white_bg = document.querySelector('.white_space');
        
        if (progress_bar) {
            progress_bar.style.width = `${p+1}%`;
        }
        
        const load_value = document.querySelector('.load_value');
        if (load_value) {
            load_value.innerHTML = `${p}%`;
        }
        
        if (p != 100) {
            setTimeout(timeout_trigger, 30);
        }
        p++;
        
        if (p > 100 && white_bg) {
            white_bg.classList.add('hide');
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    timeout_trigger();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
function startGame() {
    const introModal = document.querySelector('.intro-modal');
    introModal.classList.add('hide');
    setTimeout(() => introModal.remove(), 300);
}

//–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
const regexp = /\d[A-Z,a-z]\d\d[A-Z,a-z][A-Z,a-z]\d/
function getWunch(){
    code = document.getElementById('code_value').value.toUpperCase(); 
	desire_block = document.getElementById('desire');
	front =  document.querySelector('.front');
    back =  document.querySelector('.back');
    if(code.length != 7 || !regexp.test(code))  
        {
            alert('–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É: 0–ê00–ê–ê0');
            return;
        } 
	
		
    desire_text = CodeArray[code];
	if (typeof desire_text == 'undefined'){
		desire_text = "–°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ª—É—á—à–µ –Ω–µ –æ–±–º–∞–Ω—ã–≤–∞—Ç—å)";
	}
	
	if( desire_text.length > 150) {
		console.log(desire_text.length);
		desire_block.style = 'font-size: 1em;';
	}
	else desire_block.style = 'font-size: 1.2em;';
	
    desire_block.innerHTML = `${desire_text}`;    
    
    front.style.transform = 'rotateY(180deg)';
    back.style.transform = 'rotateY(360deg)';
    
    
       
}
function takeshot() {
    document.querySelector('.front').style.display = "none";
    document.getElementById('screen_text').innerHTML = '–ú–æ—ë –ø–æ–∂–µ–ª–∞–Ω–∏–µ)';   
    
    html2canvas(document.body).then(canvas => {
        let a = document.createElement("a");
        a.download = "my_valentins_desire.png";
        a.href = canvas.toDataURL("image/png");
        a.click();
      });
    
    document.getElementById('screen_text').innerHTML = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!';   
}

async function Screenshot(){
    var constraints = {
        preferCurrentTab: true,
        audio: false,
        video: {
          width: { ideal: 1920, max: 7680 },
          height: { ideal: 1080, max: 4320 }
        }
      }
    try {
        const stream = await navigator.mediaDevices.getDisplayMedia(constraints);
        const video = document.createElement("video");

        video.addEventListener("loadedmetadata", () => {
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");

            canvas.height = video.videoHeight;
            canvas.width = video.videoWidth;

            video.play();

            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            //stream.getVideoTracks()[0].stop();
            document.body.appendChild(canvas);
            /*
            let a = document.createElement("a");
            a.download = "ss.png";
            a.href = canvas.toDataURL("image/png");
            a.click();
            */
        });
        video.srcObject = stream;
        console.log(stream);
    }
    catch (error) {
        console.log(error);
    }
}

function getAllUrlParams(url) {

  // –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ URL –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ window
  var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

  // –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  var obj = {};

  // –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (queryString) {

    // –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ # –±—É–¥—É—Ç –æ–ø—É—â–µ–Ω—ã
    queryString = queryString.split('#')[0];

    // —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    var arr = queryString.split('&');

    for (var i=0; i<arr.length; i++) {
      // —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ –∫–ª—é—á => –∑–Ω–∞—á–µ–Ω–∏–µ
      var a = arr[i].split('=');

      // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∞: list[]=thing1&list[]=thing2
      var paramNum = undefined;
      var paramName = a[0].replace(/\[\d*\]/, function(v) {
        paramNum = v.slice(1,-1);
        return '';
      });

      // –ø–µ—Ä–µ–¥–∞—á–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ('true' –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ)
      var paramValue = typeof(a[1])==='undefined' ? true : a[1];

      // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞
      paramName = paramName.toLowerCase();
      paramValue = paramValue.toLowerCase();

      // –µ—Å–ª–∏ –∫–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–∂–µ –∑–∞–¥–∞–Ω
      if (obj[paramName]) {
        // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
        if (typeof obj[paramName] === 'string') {
          obj[paramName] = [obj[paramName]];
        }
        // –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –∏–Ω–¥–µ–∫—Å...
        if (typeof paramNum === 'undefined') {
          // –ø–æ–º–µ—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
          obj[paramName].push(paramValue);
        }
        // –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞–Ω...
        else {
          // —Ä–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
          obj[paramName][paramNum] = paramValue;
        }
      }
      // –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∑–∞–¥–∞–Ω, –¥–µ–ª–∞–µ–º —ç—Ç–æ –≤—Ä—É—á–Ω—É—é
      else {
        obj[paramName] = paramValue;
      }
    }
  }

  return obj;
}